// ignore_for_file: avoid_print

import 'dart:io';

void main(List<String> args) {
  if (args.isEmpty) {
    return;
  }

  final viewName = args[0].split('_').map((e) => e.toFirstUpperCase()).join();
  final viewNameWithUnderscore = args[0];

  // DIRECTORY AND FILES
  final viewFolder = Directory('./lib/views/$viewNameWithUnderscore');
  final widgetsFolder =
      Directory('./lib/views/$viewNameWithUnderscore/widgets');
  final viewFile =
      File('./lib/views/$viewNameWithUnderscore/$viewNameWithUnderscore.dart');
  final controllerFile =
      File('./lib/controllers/${viewNameWithUnderscore}_controller.dart');
  final bindingFile =
      File('./lib/utils/bindings/${viewNameWithUnderscore}_binding.dart');

  final directories = [
    viewFolder,
    widgetsFolder,
  ];

  for (final directory in directories) {
    if (!directory.existsSync()) {
      directory.createSync(recursive: true);
    }
  }

  viewFile.writeAsStringSync('''import 'package:flutter/material.dart';

import 'package:get/get.dart';

import '../../controllers/${viewNameWithUnderscore}_controller.dart';

class $viewName extends GetView<${viewName}Controller> {
  const $viewName({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(); // TODO(you): START HERE
  }
}
''');

  controllerFile.writeAsStringSync('''import 'package:get/get.dart';

class ${viewName}Controller extends GetxController {
  // TODO(you): START HERE
}''');

  bindingFile.writeAsStringSync('''import 'package:get/get.dart';

import '../../controllers/${viewNameWithUnderscore}_controller.dart';

class ${viewName}Binding implements Bindings {
  @override
  void dependencies() {
    Get.put(${viewName}Controller());
  }
}''');

  final appRoutesFile = File('./lib/routes/app_routes.dart');
  var appRoutesFileLines = appRoutesFile.readAsLinesSync();
  appRoutesFileLines = appRoutesFileLines
      .skip(appRoutesFileLines
          .indexWhere((element) => element.contains('class AppRoutes {')))
      .toList();

  final appRouteName = viewName[0].toLowerCase() + viewName.substring(1);

  appRoutesFileLines.insert(appRoutesFileLines.length - 3,
      '''  static const String $appRouteName = '/${viewNameWithUnderscore.replaceAll('_', '-').replaceAll('-view', '')}';''');
  appRoutesFileLines.insert(0, '/// GENERATED BY mvc_gen.dart');
  appRoutesFileLines.insert(1, '/// DO NOT EDIT BY HAND!');
  appRoutesFileLines.insert(2, '');

  final appRoutesFileAsString = appRoutesFileLines.join('\n');

  File(appRoutesFile.path).writeAsStringSync(appRoutesFileAsString);

  final appViewsFile = File('./lib/routes/app_views.dart');
  final appViewsFileLines = appViewsFile.readAsLinesSync().skip(3).toList();

  final lastGetPageIndex =
      appViewsFileLines.indexWhere((element) => element.contains('];'));

  final getPageStrings = [];
  getPageStrings.add('   GetPage(');
  getPageStrings.add('''      name: AppRoutes.$appRouteName,''');
  getPageStrings.add('''      page: () => const $viewName(),''');
  getPageStrings.add('''      binding: ${viewName}Binding(),''');
  getPageStrings.add('''    ),''');

  appViewsFileLines.insertAll(lastGetPageIndex, getPageStrings.map((e) => e));

  final appViewTextIndex =
      appViewsFileLines.indexWhere((e) => e.contains('class AppViews'));
  appViewsFileLines.insert(appViewTextIndex - 2,
      '''import '../views/$viewNameWithUnderscore/$viewNameWithUnderscore.dart';''');
  appViewsFileLines.insert(appViewTextIndex - 1,
      '''import '../utils/bindings/${viewNameWithUnderscore}_binding.dart';''');

  appViewsFileLines.insert(0, '/// GENERATED BY mvc_gen.dart');
  appViewsFileLines.insert(1, '/// DO NOT EDIT BY HAND!');
  appViewsFileLines.insert(2, '///');

  final appViewsFileAsString = appViewsFileLines.join('\n');

  File(appViewsFile.path).writeAsStringSync(appViewsFileAsString);

  try {
    print('Formatting route files...');
    Process.runSync('dart', ['fix', '--apply', './lib/routes/']);
    print('Formatting completed.');
  } catch (e) {
    print('Something went wrong while formatting. Error: ${e.toString()}');
  }

  try {
    print(
        'Opening ${viewFile.path.fileName()} and ${controllerFile.path.fileName()}');
    Process.runSync('code', ['-r', viewFile.path, controllerFile.path]);
    print('Files are successfully opened.');
    print('SUCCESS!');
  } catch (e) {
    print('Something went wrong. Error: ${e.toString()}');
  }
}

extension StringExtension on String {
  String toFirstUpperCase() {
    final text = this;

    return text[0].toUpperCase() + text.substring(1);
  }

  String fileName() {
    final path = this;

    return path.split('/').last;
  }
}
